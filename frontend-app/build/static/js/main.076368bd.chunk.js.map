{"version":3,"sources":["components/Packages.js","components/PackagesContainer.js","App.js","serviceWorker.js","index.js"],"names":["PackageList","list","data","columns","label","field","sort","width","rows","rpackages","react_default","a","createElement","mdbreact_esm","striped","sortable","responsive","searchLabel","infoLabel","PackagesContainer","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","packages","_this2","axios","get","then","response","console","log","setState","catch","error","getPackages","Packages","Component","App","className","components_PackagesContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mTAqEeA,EAlEK,SAACC,GAEnB,IAAMC,EAAO,CACXC,QAAS,CAEP,CACEC,MAAO,KACPC,MAAO,KACPC,KAAM,OAER,CACEF,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,UACPC,MAAO,UACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,mBACPC,MAAO,sBACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,cACPC,MAAO,cACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,SACPC,MAAO,SACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,aACPC,MAAO,eAGXG,KAAMP,EAAKQ,WAGb,OACEC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CACEC,SAAO,EACPZ,KAAMA,EACNa,UAAU,EACVC,YAAU,EACVC,YAAY,iBACZC,UAAW,CAAC,UAAW,KAAM,KAAM,eCvB1BC,cAlCd,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACZC,SAAU,IAHOR,6EAQL,IAAAS,EAAAN,KACbO,IAAMC,IAAI,oBACTC,KAAK,SAAAC,GACLC,QAAQC,IAAIF,EAAShC,MACrB4B,EAAKO,SAAS,CAACR,SAAUK,EAAShC,SAElCoC,MAAM,SAAAC,GAAK,OAAIJ,QAAQC,IAAIG,iDAM5Bf,KAAKgB,+CAKL,OACC9B,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAC6B,EAAD,CAAahC,UAAWe,KAAKI,MAAMC,mBA7BPa,aCWjBC,MAZf,WACE,OACEjC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,aACZlC,EAAAC,EAAAC,cAAA,OAAKgC,UAAU,UACblC,EAAAC,EAAAC,cAAA,+BAGFF,EAAAC,EAAAC,cAACiC,EAAD,QCCaC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.076368bd.chunk.js","sourcesContent":["import React from 'react';\nimport { MDBDataTable } from 'mdbreact';\n\nconst PackageList = (list) => {\n\n  const data = {\n    columns: [\n\n      {\n        label: 'SN',\n        field: 'id',\n        sort: 'asc'\n      },\n      {\n        label: 'Name',\n        field: 'name',\n        sort: 'asc',\n        width: 150\n      },\n      {\n        label: 'Version',\n        field: 'version',\n        sort: 'asc',\n        width: 270\n      },\n      {\n        label: 'Date/Publication',\n        field: 'date_of_publication',\n        sort: 'asc',\n        width: 200\n      },\n      {\n        label: 'Title',\n        field: 'title',\n        sort: 'asc',\n        width: 100\n      },\n      {\n        label: 'Description',\n        field: 'description',\n        sort: 'asc',\n        width: 150\n      },\n      {\n        label: 'Author',\n        field: 'author',\n        sort: 'asc',\n        width: 100\n      },\n      {\n        label: 'Maintainer',\n        field: 'maintainer',\n      }\n    ],\n    rows: list.rpackages\n  };\n\n  return (\n    <MDBDataTable\n      striped\n      data={data}\n      sortable={false}\n      responsive\n      searchLabel=\"Search Package\"\n      infoLabel={[\"Showing\", \"to\", \"of\", \"packages\"]}\n    />\n  );\n}\n\nexport default PackageList;\n","import React, { Component } from \"react\";\nimport axios from 'axios';\nimport PackageList from './Packages';\n\n\nclass PackagesContainer extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\tpackages: []\n\t\t}\n\t}\n\n\t//Fetch latest packages from api\n\tgetPackages() {\n\t\taxios.get('/api/v1/packages')\n\t\t.then(response => {\n\t\t\tconsole.log(response.data);\n\t\t\tthis.setState({packages: response.data})\n\t\t})\n\t\t.catch(error => console.log(error))\n\t}\n\n\n\t//Only fetch packages when this component is mounted\n\tcomponentDidMount() {\n\t\tthis.getPackages()\n\t}\n\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<PackageList rpackages={this.state.packages} />\n\t\t\t</div>\n\t\t\t)\n\t}\n}\n\n\nexport default PackagesContainer\n","import React from 'react';\nimport './App.css';\nimport PackagesContainer from './components/PackagesContainer';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n       <div className=\"header\">\n         <h1> R Package List </h1>\n       </div>\n\n       <PackagesContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}